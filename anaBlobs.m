function anaBlobs(vid_path,v,opType,varargin)
% Analyze blobs that may be extracted from a video
% B = anaBlobs(vid_path,v,opType)
%  B - structure of blob data
%  vid_path - path to video file or image sequence
%  v - structure of info about video (generated by defineVidObject)
%  opType - designates the type of operation ('G&L props')
%
% B = anaBlobs(vid_path,v,'G&L props',S,blobParam,imInvert,imRoiMean)
% Finds the global and local parameters for blobs
%   im_seq - 3D sequence if images in the roi
%   fr_num - sequence of frame numbers to be included in mean image
%   Centroid - struction denoting the center of the roi (generated by tracker)
%   Rotation - rotation structure generated by tracker
%   blobParam - Structure of blob parameters
%   imInvert - logical that indicates whether to invert images
%
% % B = anaBlobs(vid_path,v,'filter motion',B,winLen,Centroid,...
%       Rotation,blobParam,tVal)
%   tVal - threshold value for blobs
%
% Developed by McHenryLab at UC Irvine


%% Parse inputs

if strcmp(opType,'G&L props')

    % Extract inputs
    %im_seq    = varargin{1};
    Body       = varargin{1};
    %Rotation  = varargin{4};
    blobParam  = varargin{2};
    imInvert   = varargin{3};
    dSample    = varargin{4};
    mPath      = varargin{5};
    visSteps   = varargin{6};
    iC         = varargin{7};
    savePath   = varargin{8};
    
    fName      = 'blobs';
 
elseif strcmp(opType,'filter motion')
    
    % Extract inputs
    currDataPath  = varargin{1};
    winLen    = varargin{2};
    Body        = varargin{3};
    blobParam = varargin{4};
%     tVal      = varargin{5};
    visSteps  = varargin{5};
    imInvert  = varargin{6};
    
    fName = 'foot_blobs';
    
    % Where to find blobPath
    blobPath = [currDataPath filesep 'blobs'];
    
    % Path for motion images (imStack data)
    motionPath = [currDataPath filesep 'mask_static'];
    
    % Where to save data for each frame
    savePath = [currDataPath filesep 'foot_blobs'];
    
    dSample = 0;
    
%     % Check frame numbers
%     for i = 1:length(B)
%        B_fr(i,1) = B(i).fr_num;      
%     end
%     if sum(B_fr'-Body.frames)~=0
%         error('Frame numbers do not match between B and Body');
%     end
%     
%     clear B_fr
    
else
    error('opType not recognized');
end

S        = Body.Rotation;
frames   = Body.frames;

if visSteps
    f = figure;
end


%% Make dir to save data

if ~isdir(savePath)
    mkdir(savePath);
end


%% Loop thru frames ('G&L props')
% Create local mask that excludes stationary objects 

if strcmp(opType,'G&L props')

    % Loop thru frames
     parfor i = 1:length(frames)
%          for i = 1:length(frames)
        
        % Current frame
        cFrame = frames(i);
        
        % Current file name (writing data)
        cNumStr = ['00000' num2str(cFrame)];
        cNumStr = cNumStr(end-5:end);
        cName   = [fName '_' num2str(cNumStr)];
        
        % Get mean image for current frame
        [imRoiMean,imRoiStd] = getMeanImage(cFrame,mPath);

        % Current whole frame
        im = getFrame(vid_path,v,cFrame,imInvert,'gray');
        
        % Get data from S structure
        [roi,tform] = returnS(S,i);
        
        % Roi image, mean image subtracted
        [im_roi,bw_mask,bw_roi_mask] = giveROI('stabilized',im,...
            roi,dSample,tform,255);
 
        % Subtract mean image, adjust contrast
        im_roi2 = imadjust(imsubtract(imRoiMean,im_roi));
        
        % Find threshold value
        tVal = 0.95*graythresh(im_roi2);
        
        % Find blobs in roi
        [props,bw_roi,areas,xB,yB] = findBlobs(im_roi2,tVal,...
            'area and circ',blobParam.areaMin,blobParam.areaMax,blobParam.AR_max);
        
        % Get roi data
        %[bw_mask,im_roi,roi_rect,bw_roi_mask] = giveROI('circular',im,x,y,r,theta,0);
        
        % Blobs in the G FOR
        bw_blobs_G = transCoord2d('bw L2G',tform,bw_roi,bw_mask,bw_roi_mask);
        
        % Survey blobs
        propsG = regionprops(bw_blobs_G,'Centroid','Area',...
            'MajorAxisLength','MinorAxisLength',...
            'PixelIdxList','PixelList');
        
        % Save data to B strcuture
        B = struct('fr_num',cFrame,'propsG',propsG,'propsL',props,...
                   'bwG',bw_blobs_G,'bwL',bw_roi);

        % Write to disk
        saveData([savePath filesep cName],B)
        
        if visSteps 
            aLevel = 0.5;
            
            % Current whole frame
            imI = getFrame(vid_path,v,cFrame,~imInvert,'gray');

            subplot(2,1,1)
            h = imshow(imI,'InitialMag','fit');
            hold on
            
            % Start with blank
            currIm  = logical(zeros(size(im)));
        
            % Loop thru blobs
            for k = 1:length(propsG)
                % Score pixels with blobs
                currIm(propsG(k).PixelIdxList) = 1;
            end
            
            % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(im)), ones(size(im)), zeros(size(im)));
            h = imshow(green,'InitialMag','fit');
            %set(h, 'AlphaData', bw_blobs_G.*aLevel)
            set(h, 'AlphaData', currIm.*aLevel)
            title(['Frame ' num2str(cFrame)]);
            
            subplot(2,1,2)            
            h = imshow(imcomplement(im_roi),'InitialMag','fit');
            hold on
            
             % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(im_roi)), ones(size(im_roi)), zeros(size(im_roi)));
            h = imshow(green,'InitialMag','fit');
            set(h, 'AlphaData', bw_roi.*aLevel)

            pause(0.001)
            
        else
            disp(['anaBlobs (' opType ') : '  num2str(i) ' of ' num2str(length(frames))]);
        end
    end   
end


%% Loop thru frames ('filter motion')

if strcmp(opType,'filter motion')
    
    %     Bin = B;
    %     clear B
    
    %tVal = blobParam.tVal;
    
    % Half interval to survey for analysis
    halfIntvl = floor(winLen/2);
    
    %     % Fill B with placeholders
    %     for i = 1:length(Bin)
    %         B(i).fr_num = Bin(i).fr_num;
    %         %B(i).frIdx  = Bin(i).frIdx;
    %         B(i).propsG = nan;
    %         B(i).propsL = nan;
    %     end
    
    % Get listing of blob data files
    [aBlob,frBlob] = fileList(blobPath,'blobs');
    
    % Get listing of averaged images
    [aMotion,frMotion] = fileList(motionPath,'mask_static');
    
    % Frames to analyze
    %     anaFrames = frames((halfIntvl+1):(length(a)-halfIntvl-1));
    
    %     % Produce image stack
    %     imB = motionImage(vid_path,v,'mask static',frames,Bin,frames,imInvert);
    
    % Loop thru frames to analyze
    parfor i = 1:length(frMotion)
        
        % Current frame
        cFrame = frMotion(i);
        
        % Current file name
        cNumStr = ['00000' num2str(cFrame)];
        cName = [fName '_' cNumStr(end-5:end)];
        
        % Index for current frame in the data
        %iFrame = Bin(i).frIdx;
        iFrame = find(frames==cFrame,1,'first');
        
        % Load imBlur strcuture
        imBlur = loadImBlur([motionPath filesep aMotion(i).name]);
        
        % Window of frames to analyze
        %         startFrame    = max([1 iFrame-halfIntvl]);
        %         endFrame      = min([length(frames) iFrame+halfIntvl]);
        %         winFrames     = startFrame:endFrame;
        
        %         winFrames     = imBlur.frames;
        
        %         % Produce image that highlights static elements
        %         imB = motionImage(vid_path,v,'mask static',winFrames,Bin,...
        %                           frames,imInvert);
        
        %         bwStack = loadImStack(motionPath);
        
        % extract current frames
        %         bwStack = imStack(:,:,winFrames);
        
        % Get average image
        %         imAvg = uint8(sum(double(bwStack),3)./length(winFrames));
        
        % Boost contrast
        %imB = imcomplement(imadjust(imAvg));
        imB = imcomplement(imBlur.im);
        
        % Get threshol value for feet
        tVal = 2*graythresh(imB);
        
        % Find blobs in image
        [propsG,bw_im] = findBlobs(imB,tVal,...
            'area and circ',blobParam.areaMin,...
            blobParam.areaMax,blobParam.AR_max);
        
        % Get roi data
        %[bw_mask,im_roi,roi_rect,bw_roi_mask] = giveROI('circular',imB,x,y,r,theta,0);
        im_roi = giveROI('stabilized',imB,S.roi(i),dSample, ...
            S.tform(i),0);
        
        % Find blobs in roi
        [propsL,bw_roi] = findBlobs(im_roi,tVal,...
            'area and circ',blobParam.areaMin,...
            blobParam.areaMax,blobParam.AR_max);
        
        % Store blob data
%         B_ft.fr_num = cFrame;
%         B_ft.frIdx  = iFrame;
%         B_ft.propsG = propsG;
%         B_ft.propsL = propsL;

        B_ft = struct('fr_num',cFrame,'frIdx',iFrame,'propsG',propsG,...
            'propsL',propsL);
        
        % Write data
        saveB_ft([savePath filesep cName],B_ft)
        
        if visSteps
            
            % Alpha transparency
            aLevel = 0.5;
            
            subplot(2,1,1)
            % Current whole frame
            im = getFrame(vid_path,v,cFrame,imInvert,'gray');
            
            imshow(im,'InitialMag','fit');
            hold on
            
            % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(imB)), ones(size(imB)), ...
                zeros(size(imB)));
            h = imshow(green,'InitialMag','fit');
            
            set(h, 'AlphaData', bw_im.*aLevel)
            title(['Frame ' num2str(cFrame)]);
            for j = 1:length(B_ft(iFrame).propsG)
                scatter(B_ft(iFrame).propsG(j).Centroid(1),...
                    B_ft(iFrame).propsG(j).Centroid(2),'SizeData',200,...
                    'MarkerEdgeColor','b')
            end
            hold off
            
            subplot(2,1,2)
            imshow(giveROI('stabilized',im,S.roi(i),dSample,S.tform(i)),...
                'InitialMag','fit');
            hold on
            % Make a truecolor all-green image, make non-blobs invisible
            green = cat(3, zeros(size(bw_roi)), ones(size(bw_roi)), ...
                zeros(size(bw_roi)));
            h = imshow(green,'InitialMag','fit');
            set(h, 'AlphaData', bw_roi.*aLevel)
            
            for j = 1:length(B_ft(iFrame).propsL)
                scatter(B_ft(iFrame).propsL(j).Centroid(1),...
                    B_ft(iFrame).propsL(j).Centroid(2),'SizeData',400,...
                    'MarkerEdgeColor','b')
            end
            hold off
            title(['Frame ' num2str(cFrame)]);
            
        end
        
        
        % Status report
        %         disp(' ')
        disp(['anaBlobs (' opType ') : done ' num2str(i) ' of ' ...
            num2str(length(frMotion))])
        %         disp(' ');
        
        %clear im_roi im bw_roi bw_im propsG propsL cName B_ft
    end
    
end

%% Outputs

% varargout{1} = B;


function [imRoiMean,imRoiStd] = getMeanImage(cFrame,mPath)

% Listing of mean images
a = dir([mPath filesep 'mean*']);

for i = 1:length(a)
    
    % Index of separators
    iSep = find(a(i).name=='_');
    
    % Get start frame
    frStart = str2num(a(i).name((iSep(2)+1):(iSep(3)-1)));
    
    % Get end frame
    frEnd = str2num(a(i).name((iSep(3)+1):(end-4)));
    
    if cFrame>=frStart && cFrame<=frEnd
        % Load imean image data
        load([mPath filesep a(i).name])
        
        % Define 
        imRoiMean = roiM.im;
        imRoiStd  = roiM.imStd;

        break
    end
end

% Check for definition
if ~exist('imRoiMean','var')
    error(['No match for cFrame = ' num2str(cFrame)])
end


function imStack = loadImStack(motionPath)


function imBlur = loadImBlur(blurPath)
load(blurPath)

function [roi,tform] = returnS(S,i)

roi    = S.roi(i);
tform  = S.tform(i);


function saveData(sPath,B)
% Saves structure B.  Needed to parallelize the code.
save(sPath,'-v7.3','B')


function saveB_ft(sPath,B_ft)
% Save data for current frame
save(sPath,'-v7.3','B_ft')

function [a,frNums] = fileList(fPath,fPrefix)

frNums = [];

% File listing
a = dir([fPath filesep fPrefix '*']);

% Loop trhu files
for i = 1:length(a)
    
    % Index of separator
    iSep = find(a(i).name=='_',1,'last');
    
    % Get frame number
    a(i).frNum = str2num(a(i).name((iSep+1):end-4));
    
    frNums = [frNums; a(i).frNum];
end


    

